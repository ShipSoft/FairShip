/* Generated by Together */
#include "ShipCave.h"

#include "FairGeoBuilder.h"
#include "FairGeoInterface.h"   // for FairGeoInterface
#include "FairGeoLoader.h"      // for FairGeoLoader
#include "FairGeoMedia.h"
#include "ShipGeoCave.h"   // for ShipGeoCave
#include "ShipUnit.h"
#include "TGeoBBox.h"
#include "TGeoCompositeShape.h"
#include "TGeoManager.h"

using ShipUnit::cm;
using ShipUnit::m;
using ShipUnit::mm;
using ShipUnit::tesla;

ShipCave::ShipCave(Double_t z)
    : FairModule("Cave", "ShipCave")
{
    z_end_of_proximity_shielding = z;
}

Int_t ShipCave::InitMedium(TString name)
{
    static FairGeoLoader* geoLoad = FairGeoLoader::Instance();
    static FairGeoInterface* geoFace = geoLoad->getGeoInterface();
    static FairGeoMedia* media = geoFace->getMedia();
    static FairGeoBuilder* geoBuild = geoLoad->getGeoBuilder();

    FairGeoMedium* ShipMedium = media->getMedium(name);

    if (!ShipMedium)
        Fatal("InitMedium", "Material %s not defined in media file.", name.Data());
    TGeoMedium* medium = gGeoManager->GetMedium(name);
    if (medium)
        return ShipMedium->getMediumIndex();
    return geoBuild->createMedium(ShipMedium);
}

void ShipCave::ConstructGeometry()
{
    FairGeoLoader* loader = FairGeoLoader::Instance();
    FairGeoInterface* GeoInterface = loader->getGeoInterface();
    ShipGeoCave* MGeo = new ShipGeoCave();
    MGeo->setGeomFile(GetGeometryFileName());
    GeoInterface->addGeoModule(MGeo);
    Bool_t rc = GeoInterface->readSet(MGeo);
    if (rc) {
        MGeo->create(loader->getGeoBuilder());
    }
    TGeoVolume* top = gGeoManager->GetTopVolume();
    InitMedium("Concrete");
    TGeoMedium* concrete = gGeoManager->GetMedium("Concrete");

    Double_t TCC8_length = 170 * m;
    // Add small stair step at the beginning of ECN3
    Double_t stair_step_length = 0.82 * m;
    Double_t ECN3_length = 100 * m;
    Double_t Proximity_shield_half_length = 55.36 / 2 * cm;
    Double_t zEndOfTarget = z_end_of_proximity_shielding - 2 * Proximity_shield_half_length;
    Double_t z_transition = 20.52 * m;
    auto* rock = new TGeoBBox("rock", 20 * m, 20 * m, TCC8_length / 2. + ECN3_length / 2. + 5 * m);
    auto* muon_shield_cavern = new TGeoBBox("muon_shield_cavern", 4.995 * m, 3.75 * m, TCC8_length / 2.);
    auto* TCC8_shift = new TGeoTranslation("TCC8_shift", 1.435 * m, 2.05 * m, -TCC8_length / 2.);
    TCC8_shift->RegisterYourself();

    // Create ECN3 cavern around vessel
    auto* experiment_rock = new TGeoBBox("experiment_rock", 20 * m, 20 * m, ECN3_length / 2.);
    auto* stair_step = new TGeoBBox("stair_step", 7.995 * m, 5.6 * m, stair_step_length / 2.);
    auto* stair_step_shift = new TGeoTranslation("stair_step_shift", 3.435 * m, 3.04 * m, stair_step_length / 2.);
    stair_step_shift->RegisterYourself();
    auto* experiment_cavern =
        new TGeoBBox("experiment_cavern", 7.995 * m, 6 * m, ECN3_length / 2. - stair_step_length / 2.);
    auto* ECN3_shift =
        new TGeoTranslation("ECN3_shift", 3.435 * m, 2.64 * m, ECN3_length / 2. + stair_step_length / 2.);
    ECN3_shift->RegisterYourself();

    auto* yoke_pit = new TGeoBBox("yoke_pit", 4.2 * m, 0.5 * m, 4.5 * m);
    auto* yoke_pit_shift = new TGeoTranslation("yoke_pit_shift", 0 * m, -3.86 * m, 89.57 * m - z_transition);
    yoke_pit_shift->RegisterYourself();

    auto* target_pit = new TGeoBBox("target_pit", 2 * m, 0.5 * m, 2 * m);
    auto* target_pit_shift =
        new TGeoTranslation("target_pit_shift", 0 * m, -2.2 * m, zEndOfTarget - 2 * m - z_transition);
    target_pit_shift->RegisterYourself();

    auto* compRock = new TGeoCompositeShape("compRock",
                                            "rock - muon_shield_cavern:TCC8_shift"
                                            "- experiment_cavern:ECN3_shift"
                                            "- stair_step:stair_step_shift"
                                            "- yoke_pit:yoke_pit_shift"
                                            "- target_pit:target_pit_shift");
    auto* Cavern = new TGeoVolume("Cavern", compRock, concrete);
    Cavern->SetLineColor(11);   // grey
    Cavern->SetTransparency(50);
    top->AddNode(Cavern, 1, new TGeoTranslation(0, 0, z_transition));
}
ShipCave::ShipCave()
    : FairModule()
{}

ShipCave::~ShipCave() {}
ShipCave::ShipCave(const char* name, const char* Title)
    : FairModule(name, Title)
{
    world[0] = 0;
    world[1] = 0;
    world[2] = 0;
}
